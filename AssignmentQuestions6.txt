Q1.What is Collection in Java?

The Collection in Java is a framework that provides an architecture to store and manipulate the group of objects.
Java Collection means a single unit of objects. Java Collection framework provides many interfaces (Set, List, Queue, Deque) 
and classes (ArrayList, Vector, LinkedList, PriorityQueue, HashSet, LinkedHashSet, TreeSet).


Q2. Differentiate between Collection and collections in the context of Java.

Collection is a interface present in java.util.package. It is used to represent a group of individual objects as a single unit

The Collection in Java is a framework that provides an architecture to store and manipulate the group of objects.

Java Collection can achieve all the operations that you perform on a data such as searching, sorting, insertion, 
 manipulation, and deletion.
 
Java Collection framework provides many interfaces (Set, List,  Queue, Deque) and classes (ArrayList, Vector, LinkedList,
PriorityQueue, HashSet, LinkedHashSet, TreeSet).


Collections is a utility class present in java.util.package. 
It defines several utility methods like sorting and searching which is used to operate on collection. 
It has all static methods.
These methods provide much-needed convenience to developers, allowing them to effectively work with Collection Framework.
 
For example, It has a method sort() to sort the collection elements according to default sorting order,
and it has a method min(), and max() to find the minimum and maximum value respectively in the collection elements.



Q3. What are the advantages of the Collection framework?

Reduces programming effort: By providing useful data structures and algorithms, 
the Collections Framework frees you to concentrate on the important parts of your program rather than on the low-level "plumbing" required to make it work.
 
Increases program speed and quality: This Collections Framework provides high-performance,
 high-quality implementations of useful data structures and algorithms. The various implementations of each interface are interchangeable,
 so programs can be easily tuned by switching collection implementations. 
 
Allows interoperability among unrelated APIs: The collection interfaces are the vernacular by which APIs pass collections back and forth.
 If my network administration API furnishes a collection of node names and if your GUI toolkit expects a collection of column headings,
 our APIs will interoperate seamlessly, even though they were written independently.
 
Reduces effort to learn and to use new APIs: Many APIs naturally take collections on input and furnish them as output.
 In the past, each such API had a small sub-API devoted to manipulating its collections.
 There was little consistency among these ad hoc collections sub-APIs, so you had to learn each one from scratch,
 and it was easy to make mistakes when using them. With the advent of standard collection interfaces, the problem went away.
 
Reduces effort to design new APIs: This is the flip side of the previous advantage. 
Designers and implementers don't have to reinvent the wheel each time they create an API that relies on collections;
 instead, they can use standard collection interfaces.
 
Fosters software reuse: New data structures that conform to the standard collection interfaces are by nature reusable.
 The same goes for new algorithms that operate on objects that implement these interfaces.
 
 
 
 Q4.Explain the various interfaces used in the Collection framework.
 
 Java Collection framework provides many interfaces (Set, List, Queue, Deque)
 and classes (ArrayList, Vector, LinkedList, PriorityQueue, HashSet, LinkedHashSet, TreeSet).
 
 
 Collection — the root of the collection hierarchy.
 A collection represents a group of objects known as its elements.
 Some types of collections allow duplicate elements, and others do not.
 Some are ordered and others are unordered. 
 
 
Set — a collection that cannot contain duplicate elements. 
This interface models the mathematical set abstraction and is used to represent sets, such as the cards comprising a poker hand,
 the courses making up a student's schedule, or the processes running on a machine.
 
List — an ordered collection (sometimes called a sequence). 
Lists can contain duplicate elements. 
The user of a List generally has precise control over where in the list each element is inserted
 and can access elements by their integer index (position).
 
 
Queue — a collection used to hold multiple elements prior to processing. Besides basic Collection operations,
 a Queue provides additional insertion, extraction, and inspection operations.
Queues typically, but do not necessarily, order elements in a FIFO (first-in, first-out) manner.
 Among the exceptions are priority queues, which order elements according to a supplied comparator or the elements' natural ordering. 
 Whatever the ordering used, the head of the queue is the element that would be removed by a call to remove or poll.
 In a FIFO queue, all new elements are inserted at the tail of the queue. Other kinds of queues may use different placement rules.
 Every Queue implementation must specify its ordering properties. 
 

Deque — a collection used to hold multiple elements prior to processing.
 Besides basic Collection operations, a Deque provides additional insertion, extraction, and inspection operations.
Deques can be used both as FIFO (first-in, first-out) and LIFO (last-in, first-out).
 In a deque all new elements can be inserted, retrieved and removed at both ends.

Map — an object that maps keys to values. 
A Map cannot contain duplicate keys; each key can map to at most one value.
 
 
Q5.Differentiate between List and Set in Java.

The List interface allows storing the ordered collection. It is a child interface of Collection.
 It is an ordered collection of objects in which duplicate values are allowed to store. 
List preserves the insertion order, it allows positional access and insertion of elements.

The set interface in the java.util package and extends Collection interface is an unordered collection of objects in which duplicate values cannot be stored.
 It is an interface that implements the maths set.
 This interface contains the methods inherited from the Collection interface and adds a feature that restricts to insert the duplicate elements.
 
 
Q6. Differentiate between Iterator and ListIterator in Java.
 
 
 Iterators are used in Collection framework in Java to retrieve elements one by one.
 It can be applied to any Collection object. By using Iterator, we can perform both read and remove operations. 
 Iterator must be used whenever we want to enumerate elements in all Collection framework implemented
 interfaces like Set, List, Queue, Deque and also in all implemented classes of Map interface. 
 Iterator is the only cursor available for entire collection framework. 
 Iterator object can be created by calling iterator() method present in Collection interface.
 
 // Here "c" is any Collection object. itr is of
// type Iterator interface and refers to "c"
Iterator itr = c.iterator();

ListIterator It is only applicable for List collection implemented classes like arraylist, linkedlist etc. 
It provides bi-directional iteration. ListIterator must be used when we want to enumerate elements of List. 
This cursor has more functionality(methods) than iterator. 
ListIterator object can be created by calling listIterator() method present in List interface.

// Here "l" is any List object, ltr is of type
// ListIterator interface and refers to "l"
ListIterator ltr = l.listIterator();


Differentiate between Comparable and Comparator

Comparable-->
Comparable provides a single sorting sequence. In other words, we can sort the collection 
on the basis of a single element such as id, name, and price.

Comparable provides compareTo() method to sort elements.
 
Comparable is present in java.lang package.
 
We can sort the list elements of Comparable type by Collections.sort(List) method.

Comparator-->
The Comparator provides multiple sorting sequences. In other words, we can sort the collection 
on the basis of multiple elements such as id, name, and price etc.

Comparator provides compare() method to sort elements.

A Comparator is present in the java.util package.

We can sort the list elements of Comparator type by Collections.sort(List, Comparator) method.


Q8.What is collision in HashMap?

A collision, or more specifically, a hash code collision in a HashMap,
 is a situation where two or more key objects produce the same final hash value and hence point to the same bucket location or array index.
 
 
 
Q9.Distinguish between a hashmap and a Treemap.


Java HashMap is a hashtable based implementation of Map interface.

HashMap implements Map, Cloneable, and Serializable interface.

HashMap allows a single null key and multiple null values.
	
HashMap allows heterogeneous elements because it does not perform sorting on keys.
	
HashMap is faster than TreeMap because it provides constant-time performance that is O(1) for the basic operations like get() and put().

The HashMap class uses the hash table.	

It uses equals() method of the Object class to compare keys. The equals() method of Map class overrides it.	

HashMap class contains only basic functions like get(), put(), KeySet(), etc. .	

HashMap does not maintain any order.	

The HashMap should be used when we do not require key-value pair in sorted order.	



Java TreeMap is a Tree structure-based implementation of Map interface.

TreeMap implements NavigableMap, Cloneable, and Serializable interface.

TreeMap does not allow null keys but can have multiple null values.

TreeMap allows homogeneous values as a key because of sorting.

TreeMap is slow in comparison to HashMap because it provides the performance of O(log(n)) for most operations like add(), remove() and contains().

TreeMap internally uses a Red-Black tree, which is a self-balancing Binary Search Tree.
 
It uses the compareTo() method to compare keys.

TreeMap class is rich in functionality, because it contains functions like: tailMap(), firstKey(), lastKey(), pollFirstEntry(), pollLastEntry().

The elements are sorted in natural order (ascending).

The TreeMap should be used when we require key-value pair in sorted (ascending) order.



Q10.Define LinkedHashMap in Java


The LinkedHashMap Class is just like HashMap with an additional feature of maintaining an order of elements inserted into it.
 HashMap provided the advantage of quick insertion, search, and deletion but it never maintained the track and order of insertion,
 which the LinkedHashMap provides where the elements can be accessed in their insertion order. 
 
 